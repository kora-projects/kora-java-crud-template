import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath("ru.tinkoff.kora:openapi-generator:$koraVersion")
    }
}

plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.openapi.generator" version "7.4.0"
    id "org.flywaydb.flyway" version "8.4.2"
    id "com.diffplug.spotless" version "6.19.0"
}

group = groupId
version = koraVersion

application {
    applicationName = "application"
    mainClassName = "ru.tinkoff.kora.java.crud.Application"
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom)
    compileOnly.extendsFrom(koraBom)
    implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:$koraVersion")
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora:http-server-undertow"
    implementation "ru.tinkoff.kora:database-jdbc"
    implementation "ru.tinkoff.kora:micrometer-module"
    implementation "ru.tinkoff.kora:json-module"
    implementation "ru.tinkoff.kora:validation-module"
    implementation "ru.tinkoff.kora:cache-caffeine"
    implementation "ru.tinkoff.kora:resilient-kora"
    implementation "ru.tinkoff.kora:config-hocon"
    implementation "ru.tinkoff.kora:openapi-management"
    implementation "ru.tinkoff.kora:logging-logback"

    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    implementation "org.postgresql:postgresql:42.7.2"

    testImplementation "org.json:json:20231013"
    testImplementation "org.skyscreamer:jsonassert:1.5.1"

    testImplementation "org.mockito:mockito-core:5.7.0"
    testImplementation "ru.tinkoff.kora:test-junit5"
    testImplementation "io.goodforgod:testcontainers-extensions-postgres:0.12.2"
    testImplementation "org.testcontainers:junit-jupiter:1.19.8"
}

def openApiGeneratePetV3 = tasks.register("openApiGenerateHttpServer", GenerateTask) {
    generatorName = "kora"
    group = "openapi tools"
    inputSpec = "$projectDir/src/main/resources/openapi/http-server.yaml"
    outputDir = "$buildDir/generated/openapi"
    def corePackage = "ru.tinkoff.kora.java.crud.openapi.http.server"
    apiPackage = "${corePackage}.api"
    modelPackage = "${corePackage}.model"
    invokerPackage = "${corePackage}.invoker"
    configOptions = [
            mode                  : "java-server",
            enableServerValidation: "true",
    ]
}
sourceSets.main { java.srcDirs += openApiGeneratePetV3.get().outputDir }
compileJava.dependsOn openApiGeneratePetV3

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "POSTGRES_JDBC_URL": "jdbc:postgresql://$postgresHost:$postgresPort/$postgresDatabase",
            "POSTGRES_USER"    : "$postgresUser",
            "POSTGRES_PASS"    : "$postgresPassword",
    ])
}

distTar {
    archiveFileName = "application.tar"
}

test {
    dependsOn tasks.distTar

    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    jacoco {
        excludes += ["**/Application*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

flyway {
    url = "jdbc:postgresql://$postgresHost:$postgresPort/$postgresDatabase"
    user = "$postgresUser"
    password = "$postgresPassword"
    locations = ["classpath:db/migration"]
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse("4.21").configFile("${rootDir}/config/codestyle.xml")
        targetExclude("**/proto/**", "**/generated/openapi/**", "**/generated/soap/**", "**/generated/grpc/**",)
    }
}
